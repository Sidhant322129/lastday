///A///
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
bool issafe(int color[],int graph[][4],int n,int col,int node){
    for(int i=0;i<n;i++){
        if(i!=node&&graph[i][node]==1&&color[i]==col)   return false;
    }
    return true;
}
bool solve(int m,int color[],int graph[][4],int n,int node){
    if(node==n) return true;
    for(int i=1;i<=m;i++){
        if(issafe(color,graph,n,i,node)){
            color[node]=i;
            if(solve(m,color,graph,n,node+1))   return true;
            color[node]=0;
        }
    }
    return false;
}
int findcnum(int graph[][4],int n){
    int color[n];
    for(int i=1;i<=n;i++){
        for(int j=0;j<n;j++)    color[j]=0;
        if(solve(i,color,graph,n,0)){
            printf("Minimum number of colors required:%d\n",i);
            printf("Color of each node:\n");
            for(int k=0;k<n;k++){
                printf("Node:%d->%d\n",k+1,color[k]);
            }
            return i;
        }
    }
    return n;
}
int main(){
    int graph[4][4]={{0,1,1,1},{1,0,1,0},{1,1,0,1},{1,0,1,0}};
    findcnum(graph,4);
}


///P///
#include <stdio.h>
#include <stdbool.h>

bool is_safe(int adj[4][4], int color[], int n, int node, int c) {
    for (int i = 0; i < n; i++) {
        if(node == i)continue;
        else if (adj[node][i] && color[i] == c) return false;
    }
    return true;
}

bool find(int node, int adj[4][4], int color[], int m, int n) {
    if (node == n) return true;

    for (int i = 0; i < m; i++) {
        if (is_safe(adj, color, n, node, i)) {
            color[node] = i;
            if (find(node + 1, adj, color, m, n)) return true;
            color[node] = -1; // Backtrack
        }
    }
    return false;
}

int main() {
    int adj[4][4] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0},
    };
   
    int m;
    printf("Enter the number of colors: ");
    scanf("%d", &m);
   
    int color[4];
    for (int i = 0; i < 4; i++) color[i] = -1;
   
    if (find(0, adj, color, m, 4)) {
        for (int i = 0; i < 4; i++) {
            if(i == 2 || i == 3){
                if(i == 2){
                    printf("Node %d -> Color %d\n", i + 1, color[i + 1] + 1);
                }
                if(i == 3){
                    printf("Node %d -> Color %d\n", i + 1, color[i - 1] + 1);
                }
            }
            else {
                printf("Node %d -> Color %d\n", i + 1, color[i] + 1);
            }
        }
    } else {
        printf("Not possible with %d colors.\n", m);
    }
   
    return 0;
}

//S//
#include <stdio.h>
#include <stdbool.h>

#define MAX 100

bool isSafe(int node, int color[], bool graph[MAX][MAX], int n, int col) {
    for (int k = 0; k < n; k++) {
        if (k != node && graph[k][node] == 1 && color[k] == col) {
            return false;
        }
    }
    return true;
}

bool solve(int node, int color[], int m, int N, bool graph[MAX][MAX]) {
    if (node == N) {
        return true;
    }
    for (int i = 1; i <= m; i++) {
        if (isSafe(node, color, graph, N, i)) {
            color[node] = i;
            if (solve(node + 1, color, m, N, graph)) return true;
            color[node] = 0;
        }
    }
    return false;
}

bool graphColoring(bool graph[MAX][MAX], int m, int N, int color[]) {
    return solve(0, color, m, N, graph);
}

void printSolution(int color[], int N) {
    printf("\n");
    for (int i = 0; i < N; i++) {
        printf("Node %d -> color %d\n", i + 1, color[i]);
    }
}

int main() {
    bool graph[MAX][MAX] = {0};  // Initialize all to 0
    int color[MAX] = {0};
    int N, m;

    printf("Enter number of nodes: ");
    scanf("%d", &N);
    if (N <= 0 || N > MAX) {
        printf("Invalid number of nodes.\n");
        return 1;
    }

    printf("\nEnter adjacency matrix (1 for edge, 0 for no edge):\n\n    ");
    for (int j = 0; j < N; j++) {
        printf("c%-3d", j);// coloumn header
    }
    printf("\n");

    for (int i = 0; i < N; i++) {
        printf("r%-3d", i);
        for (int j = 0; j < N; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("\nEnter number of colors: ");
    scanf("%d", &m);
    if (m <= 0) {
        printf("Invalid number of colors.\n");
        return 1;
    }

    if (graphColoring(graph, m, N, color)) {
        printSolution(color, N);
    } else {
        printf("\nSolution does not exist.\n");
    }

    return 0;
}

//log//bf//
//kns//
#include <stdio.h>

typedef struct {
    int profit, weight, original_index;
    float ratio;
} Item;

void swap(Item *a, Item *b) {
    Item temp = *a;
    *a = *b;
    *b = temp;
}

// Function to compute Greatest Common Divisor (GCD) using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

void sortByRatio(Item arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j].ratio < arr[j+1].ratio) {
                swap(&arr[j], &arr[j+1]);
            }
        }
    }
}

void sortByProfit(Item arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j].profit < arr[j+1].profit) {
                swap(&arr[j], &arr[j+1]);
            }
        }
    }
}

void sortByWeight(Item arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j].weight > arr[j+1].weight) {
                swap(&arr[j], &arr[j+1]);
            }
        }
    }
}

void knapsack(int n, int m, Item items[]) {
    float solution[n];
    float total = 0;
    int remaining = m;
    
    // Initialize solution array
    for (int i = 0; i < n; i++) {
        solution[i] = 0;
    }
    
    // Fill the knapsack
    for (int i = 0; i < n; i++) {
        if (items[i].weight <= remaining) {
            solution[items[i].original_index] = 1;
            total += items[i].profit;
            remaining -= items[i].weight;
        } else if (remaining > 0) {
            // Calculate fraction in simplest form directly
            int common_divisor = gcd(remaining, items[i].weight);
            int simplified_num = remaining / common_divisor;
            int simplified_den = items[i].weight / common_divisor;
            
            solution[items[i].original_index] = (float)remaining / items[i].weight;
            total += items[i].profit * ((float)remaining / items[i].weight);
            remaining = 0;
            
            // Print the fraction immediately in simplest form
            printf("\nSolution -> ");
            for (int k = 0; k < n; k++) {
                if (k == items[i].original_index) {
                    printf("%d/%d ", simplified_num, simplified_den);
                } else if (solution[k] == 1) {
                    printf("1 ");
                } else {
                    printf("0 ");
                }
            }
            printf("\nTotal profit -> %.2f\n", total);
            return;
        }
    }
    
    // If we get here, all items were either fully included or excluded
    printf("\nSolution -> ");
    for (int i = 0; i < n; i++) {
        if (solution[i] == 1) {
            printf("1 ");
        } else {
            printf("0 ");
        }
    }
    printf("\nTotal profit -> %.2f\n", total);
}

int main() {
    int n, m, mode;
    Item items[100];
    
    printf("Enter number of items & capacity: ");
    scanf("%d %d", &n, &m);
    
    printf("Enter profit and weight for each item:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &items[i].profit, &items[i].weight);
        items[i].ratio = (float)items[i].profit / items[i].weight;
        items[i].original_index = i;
    }
    
    while (1) {
        printf("\n1. Max Profit/Weight\n2. Max Profit\n3. Min Weight\n4. Exit\nChoose: ");
        scanf("%d", &mode);
        if (mode == 4) break;
        
        Item temp[n];
        for (int i = 0; i < n; i++) temp[i] = items[i];
        
        if (mode == 1) sortByRatio(temp, n);
        else if (mode == 2) sortByProfit(temp, n);
        else if (mode == 3) sortByWeight(temp, n);
        
        knapsack(n, m, temp);
    }
    
    return 0;
}

//
